extend type Mutation {
    createMessage(input: CreateMessageInput! @spread): Message @create

    markChatAsRead(to_id: Int!, from_id: Int!): Int
    @field(resolver: "App\\GraphQL\\Mutations\\MarkAsRead@chat")

}

extend type Query {
    messages(
        orderBy: _ @orderBy(columnsEnum: "MessageColumns")
        where: _ @whereConditions(columnsEnum: "MessageColumns")
        sender: _@whereHasConditions(columnsEnum: "UserColumns")
        recipient: _@whereHasConditions(columnsEnum: "UserColumns")
    ): [Message!]! @paginate(type: PAGINATOR, defaultCount: 10)

    message(id: ID @eq): Message @find
}

type Message{
    id: ID!
    body: String!
    seen_at: DateTime
    deleted_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    sender: User @belongsTo
    recipient: User @belongsTo
}

input CreateMessageInput {
    body: String!
    sender: CreateSenderBelongsTo
    recipient: CreateRecipientBelongsTo
}

input CreateRecipientBelongsTo {
    connect: ID
}

input CreateSenderBelongsTo {
    connect: ID
}
