extend type Mutation {

    createReport(input: CreateReportInput! @spread): Report @create

}
extend type Query {
    reports(orderBy: _ @orderBy(columnsEnum: "ReportColumns")): [Report!]! @paginate(type: PAGINATOR, defaultCount: 10)

    report(id: ID @eq): Report @find
}

type Report {
    id: ID!
    body: String
    reportable_id: Int!
    reportable_type: String!
    reporter: User @belongsTo
    reportContent: ReportContent @belongsTo
    deleted_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    reportable: Reportable! @morphTo
}
union Reportable = Ad | User | Review | Comment

input CreateReportInput {
    body: String
    reporter: CreateUserBelongsTo
    reportContent: CreateReportContentBelongsTo
    reportable: CreateReportableMorphTo
}

input CreateReportableMorphTo {
    connect: ConnectReportableInput
    disconnect: Boolean
    delete: Boolean
}
input ConnectReportableInput {
    type: ReportableTypes!
    id: ID!
}
enum ReportableTypes {
    ad
    user
    review
    comment
}
input CreateReportContentBelongsTo {
    connect: ID
}
