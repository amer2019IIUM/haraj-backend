extend type Mutation {
    createAd(input: CreateAdInput! @spread): Ad @create

    updateAd(id: ID!, input: UpdateAdInput! @spread): Ad @update

    deleteAd(id: ID!): Ad @delete

    restoreAd(id: ID!): Ad @restore
}
extend type Query {
    ads(
        orderBy: _ @orderBy(columnsEnum: "AdColumns")
        where: _ @whereConditions(columnsEnum: "AdColumns")
        taxonomyContents: _
            @whereHasConditions(columnsEnum: "TaxonomyContentColumns")
    ): [Ad!]! @softDeletes @paginate(type: PAGINATOR, defaultCount: 10)

    ad(
        where: _ @whereConditions(columnsEnum: "AdColumns")
        taxonomyContents: _
            @whereHasConditions(columnsEnum: "TaxonomyContentColumns")
    ): Ad @first
}

type Ad {
    id: ID!
    sku: String!
    title: String!
    description: String
    price: Float!
    negotiable: Boolean
    status: Int
    deleted_at: DateTime
    created_at: DateTime
    updated_at: DateTime
    user: User @belongsTo
    comments: [Comment!]! @hasMany(type: PAGINATOR, defaultCount: 10)
    taxonomyContents: [TaxonomyContent!]!
        @belongsToMany(type: PAGINATOR, defaultCount: 10)
    reports: [Report!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    attachments: [Attachment!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    metadata: [Metadata!]! @morphMany(type: PAGINATOR, defaultCount: 10)
    favorite: Favorite @morphOne
    reviews: [Review!]! @morphMany(type: PAGINATOR, defaultCount: 10)
}

input CreateAdInput @validator {
    title: String
    description: String
    price: Float
    negotiable: Boolean
    status: Int
    # TODO: @inject(context: "user.id", name: "user_id")
    user: CreateUserBelongsTo
    taxonomyContents: CreateTaxonomyContentBelongsToMany
    attachments: CreateAttachmentBelongsToMany
}
input UpdateAdInput @validator {
    title: String
    description: String
    price: Float
    attachments: CreateAttachmentBelongsToMany
}
input CreateUserBelongsTo {
    connect: ID
}
input CreateTaxonomyContentBelongsToMany {
    connect: [ID!]
}
input CreateAttachmentBelongsToMany {
    connect: [ID!]
    create: [CreateAttachmentHasManyInputs]
    delete: [ID!]
    connect: [ID!]
    disconnect: [ID!]
}
input DeleteAdInput {
    delete: ID
}
input CreateAttachmentHasManyInputs {
    path: String
    disk_name: String
    type: AttachmentTypes!
    file_name: String
    thumbnail: Boolean
}
